{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","App.js","index.js","components/FeedbackOptions/Feedback.module.scss"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","className","s","button","type","name","onClick","shortid","generate","Notification","message","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","event","target","prevState","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QAiCeA,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,UAAWC,IAAEC,OAEbC,KAAK,SACLC,KAAML,EACNM,QAASR,EALX,SAOGE,GALIO,IAAQC,kBCRRC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCc3BC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MC0BQC,EA5BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,mCACE,cAAC,EAAD,CAASP,MAAM,aAAf,SACa,IAAVM,EACC,cAAC,EAAD,CAAcR,QAAQ,sBAEtB,+BACE,uCAAUK,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,eCRG,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBN,EADqB,KACfO,EADe,OAEED,mBAAS,GAFX,mBAErBL,EAFqB,KAEZO,EAFY,OAGNF,mBAAS,GAHH,mBAGrBJ,EAHqB,KAGhBO,EAHgB,KAwBtBC,EAAqB,WACzB,OAAOV,EAAOC,EAAUC,GAQ1B,OACE,gCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAAC,EAAD,CACEf,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAjCgB,SAAC4B,GAGvB,OAFaA,EAAMC,OAAOtB,MAGxB,IAAK,OACHiB,GAAQ,SAACM,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHL,GAAW,SAACK,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHJ,GAAO,SAACI,GAAD,OAAeA,EAAY,KAClC,MACF,QACE,aAuBF,cAAC,EAAD,CACEb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,IACPN,mBAjBGU,KAAKC,MAAOf,EAAOU,IAAwB,KAAO,QCjC7DM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,OAAS,4B","file":"static/js/main.6e56388d.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport s from './Feedback.module.scss';\n\n// для генерации уникального id - с вебинара\nimport shortid from 'shortid';\n\n// фрагмент\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map((option) => (\n        <button\n          className={s.button}\n          key={shortid.generate()}\n          type=\"button\"\n          name={option}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport Notification from '../Notification/Notification';\nimport Section from '../Section/Section';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <Section title=\"Statistics\">\n        {total === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <ul>\n            <li>Good:{good}</li>\n            <li>Neutral:{neutral}</li>\n            <li>Bad:{bad}</li>\n            <li>Total:{total}</li>\n            <li>Positive feedback:{positivePercentage}%</li>\n          </ul>\n        )}\n      </Section>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import { useState } from 'react';\n\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\n\nimport Statistics from './components/Statistics/Statistics';\n\nimport Section from './components/Section/Section';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = (event) => {\n    const name = event.target.name;\n\n    switch (name) {\n      case 'good':\n        setGood((prevState) => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case 'bad':\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  // total count\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  // persentage count\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100 || 0);\n  };\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={handleIncrement}\n        />\n      </Section>\n\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={countTotalFeedback()}\n        positivePercentage={countPositiveFeedbackPercentage()}\n      />\n    </div>\n  );\n}\n\n// onHandleIncrement = (event) => {\n//   const name = event.target.name;\n//   this.setState((prevState) => ({\n//     [name]: prevState[name] + 1,\n//   }));\n// };\n\n// // total count\n// countTotalFeedback = () => {\n//   const { good, neutral, bad } = this.state;\n//   return good + neutral + bad;\n// };\n\n// // persentage count\n// countPositiveFeedbackPercentage = () => {\n//   const { good } = this.state;\n//   const total = this.countTotalFeedback();\n//   return total ? Math.round((good * 100) / total) : 0;\n// };\n\n// render() {\n//   const { good, neutral, bad } = this.state;\n//   const total = this.countTotalFeedback();\n//   const positivePercentage = this.countPositiveFeedbackPercentage();\n//   console.log(this.state);\n\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Feedback_button__2584T\"};"],"sourceRoot":""}